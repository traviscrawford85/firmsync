# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clio_sdk.models.matter_create_request_data_group import MatterCreateRequestDataGroup
from clio_sdk.models.matter_create_request_data_matter_budget import MatterCreateRequestDataMatterBudget
from clio_sdk.models.matter_create_request_data_matter_stage import MatterCreateRequestDataMatterStage
from clio_sdk.models.matter_create_request_data_originating_attorney import MatterCreateRequestDataOriginatingAttorney
from clio_sdk.models.matter_create_request_data_practice_area import MatterCreateRequestDataPracticeArea
from clio_sdk.models.matter_update_request_data_client import MatterUpdateRequestDataClient
from clio_sdk.models.matter_update_request_data_custom_field_set_associations_inner import MatterUpdateRequestDataCustomFieldSetAssociationsInner
from clio_sdk.models.matter_update_request_data_custom_field_values_inner import MatterUpdateRequestDataCustomFieldValuesInner
from clio_sdk.models.matter_update_request_data_custom_rate import MatterUpdateRequestDataCustomRate
from clio_sdk.models.matter_update_request_data_evergreen_retainer import MatterUpdateRequestDataEvergreenRetainer
from clio_sdk.models.matter_update_request_data_relationships_inner import MatterUpdateRequestDataRelationshipsInner
from clio_sdk.models.matter_update_request_data_split_invoice_payers_inner import MatterUpdateRequestDataSplitInvoicePayersInner
from clio_sdk.models.matter_update_request_data_statute_of_limitations import MatterUpdateRequestDataStatuteOfLimitations
from clio_sdk.models.matter_update_request_data_task_template_list_instances_inner import MatterUpdateRequestDataTaskTemplateListInstancesInner
from typing import Optional, Set
from typing_extensions import Self

class MatterUpdateRequestData(BaseModel):
    """
    MatterUpdateRequestData
    """ # noqa: E501
    billable: Optional[StrictBool] = Field(default=True, description="Whether or not the matter is billable.")
    client: Optional[MatterUpdateRequestDataClient] = None
    client_reference: Optional[StrictStr] = Field(default=None, description="Client Reference string for external uses.")
    close_date: Optional[date] = Field(default=None, description="Date the Matter was set to closed. (Expects an ISO-8601 date).")
    currency: Optional[Dict[str, Any]] = Field(default=None, description="Currency of the matter")
    custom_field_set_associations: Optional[List[MatterUpdateRequestDataCustomFieldSetAssociationsInner]] = None
    custom_field_values: Optional[List[MatterUpdateRequestDataCustomFieldValuesInner]] = None
    custom_rate: Optional[MatterUpdateRequestDataCustomRate] = None
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the Matter.")
    display_number: Optional[StrictStr] = Field(default=None, description="Matter reference and label. Depending on the account's manual_matter_numbering setting, this is either read only (generated), or customizable.")
    evergreen_retainer: Optional[MatterUpdateRequestDataEvergreenRetainer] = None
    group: Optional[MatterCreateRequestDataGroup] = None
    location: Optional[StrictStr] = Field(default=None, description="Location of the Matter.")
    matter_budget: Optional[MatterCreateRequestDataMatterBudget] = None
    matter_stage: Optional[MatterCreateRequestDataMatterStage] = None
    open_date: Optional[date] = Field(default=None, description="Date the Matter was set to open. (Expects an ISO-8601 date).")
    originating_attorney: Optional[MatterCreateRequestDataOriginatingAttorney] = None
    pending_date: Optional[date] = Field(default=None, description="Date the Matter was set to pending. (Expects an ISO-8601 date).")
    practice_area: Optional[MatterCreateRequestDataPracticeArea] = None
    relationships: Optional[List[MatterUpdateRequestDataRelationshipsInner]] = None
    reset_matter_number: Optional[StrictBool] = Field(default=False, description="Defaults to false. Resets the matter's number based on the account's matter numbering scheme.")
    responsible_attorney: Optional[MatterCreateRequestDataOriginatingAttorney] = None
    split_invoice_payers: Optional[List[MatterUpdateRequestDataSplitInvoicePayersInner]] = None
    status: Optional[StrictStr] = Field(default=None, description="Matter status.")
    statute_of_limitations: Optional[MatterUpdateRequestDataStatuteOfLimitations] = None
    task_template_list_instances: Optional[List[MatterUpdateRequestDataTaskTemplateListInstancesInner]] = None
    __properties: ClassVar[List[str]] = ["billable", "client", "client_reference", "close_date", "currency", "custom_field_set_associations", "custom_field_values", "custom_rate", "description", "display_number", "evergreen_retainer", "group", "location", "matter_budget", "matter_stage", "open_date", "originating_attorney", "pending_date", "practice_area", "relationships", "reset_matter_number", "responsible_attorney", "split_invoice_payers", "status", "statute_of_limitations", "task_template_list_instances"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'closed', 'pending']):
            raise ValueError("must be one of enum values ('open', 'closed', 'pending')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MatterUpdateRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_field_set_associations (list)
        _items = []
        if self.custom_field_set_associations:
            for _item_custom_field_set_associations in self.custom_field_set_associations:
                if _item_custom_field_set_associations:
                    _items.append(_item_custom_field_set_associations.to_dict())
            _dict['custom_field_set_associations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_field_values (list)
        _items = []
        if self.custom_field_values:
            for _item_custom_field_values in self.custom_field_values:
                if _item_custom_field_values:
                    _items.append(_item_custom_field_values.to_dict())
            _dict['custom_field_values'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_rate
        if self.custom_rate:
            _dict['custom_rate'] = self.custom_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evergreen_retainer
        if self.evergreen_retainer:
            _dict['evergreen_retainer'] = self.evergreen_retainer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matter_budget
        if self.matter_budget:
            _dict['matter_budget'] = self.matter_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matter_stage
        if self.matter_stage:
            _dict['matter_stage'] = self.matter_stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originating_attorney
        if self.originating_attorney:
            _dict['originating_attorney'] = self.originating_attorney.to_dict()
        # override the default output from pydantic by calling `to_dict()` of practice_area
        if self.practice_area:
            _dict['practice_area'] = self.practice_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item_relationships in self.relationships:
                if _item_relationships:
                    _items.append(_item_relationships.to_dict())
            _dict['relationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of responsible_attorney
        if self.responsible_attorney:
            _dict['responsible_attorney'] = self.responsible_attorney.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in split_invoice_payers (list)
        _items = []
        if self.split_invoice_payers:
            for _item_split_invoice_payers in self.split_invoice_payers:
                if _item_split_invoice_payers:
                    _items.append(_item_split_invoice_payers.to_dict())
            _dict['split_invoice_payers'] = _items
        # override the default output from pydantic by calling `to_dict()` of statute_of_limitations
        if self.statute_of_limitations:
            _dict['statute_of_limitations'] = self.statute_of_limitations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in task_template_list_instances (list)
        _items = []
        if self.task_template_list_instances:
            for _item_task_template_list_instances in self.task_template_list_instances:
                if _item_task_template_list_instances:
                    _items.append(_item_task_template_list_instances.to_dict())
            _dict['task_template_list_instances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MatterUpdateRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billable": obj.get("billable") if obj.get("billable") is not None else True,
            "client": MatterUpdateRequestDataClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "client_reference": obj.get("client_reference"),
            "close_date": obj.get("close_date"),
            "currency": obj.get("currency"),
            "custom_field_set_associations": [MatterUpdateRequestDataCustomFieldSetAssociationsInner.from_dict(_item) for _item in obj["custom_field_set_associations"]] if obj.get("custom_field_set_associations") is not None else None,
            "custom_field_values": [MatterUpdateRequestDataCustomFieldValuesInner.from_dict(_item) for _item in obj["custom_field_values"]] if obj.get("custom_field_values") is not None else None,
            "custom_rate": MatterUpdateRequestDataCustomRate.from_dict(obj["custom_rate"]) if obj.get("custom_rate") is not None else None,
            "description": obj.get("description"),
            "display_number": obj.get("display_number"),
            "evergreen_retainer": MatterUpdateRequestDataEvergreenRetainer.from_dict(obj["evergreen_retainer"]) if obj.get("evergreen_retainer") is not None else None,
            "group": MatterCreateRequestDataGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "location": obj.get("location"),
            "matter_budget": MatterCreateRequestDataMatterBudget.from_dict(obj["matter_budget"]) if obj.get("matter_budget") is not None else None,
            "matter_stage": MatterCreateRequestDataMatterStage.from_dict(obj["matter_stage"]) if obj.get("matter_stage") is not None else None,
            "open_date": obj.get("open_date"),
            "originating_attorney": MatterCreateRequestDataOriginatingAttorney.from_dict(obj["originating_attorney"]) if obj.get("originating_attorney") is not None else None,
            "pending_date": obj.get("pending_date"),
            "practice_area": MatterCreateRequestDataPracticeArea.from_dict(obj["practice_area"]) if obj.get("practice_area") is not None else None,
            "relationships": [MatterUpdateRequestDataRelationshipsInner.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "reset_matter_number": obj.get("reset_matter_number") if obj.get("reset_matter_number") is not None else False,
            "responsible_attorney": MatterCreateRequestDataOriginatingAttorney.from_dict(obj["responsible_attorney"]) if obj.get("responsible_attorney") is not None else None,
            "split_invoice_payers": [MatterUpdateRequestDataSplitInvoicePayersInner.from_dict(_item) for _item in obj["split_invoice_payers"]] if obj.get("split_invoice_payers") is not None else None,
            "status": obj.get("status"),
            "statute_of_limitations": MatterUpdateRequestDataStatuteOfLimitations.from_dict(obj["statute_of_limitations"]) if obj.get("statute_of_limitations") is not None else None,
            "task_template_list_instances": [MatterUpdateRequestDataTaskTemplateListInstancesInner.from_dict(_item) for _item in obj["task_template_list_instances"]] if obj.get("task_template_list_instances") is not None else None
        })
        return _obj


