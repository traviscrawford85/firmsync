# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from clio_sdk.models.matter_create_request import MatterCreateRequest
from clio_sdk.models.matter_list import MatterList
from clio_sdk.models.matter_show import MatterShow
from clio_sdk.models.matter_update_request import MatterUpdateRequest

from clio_sdk.api_client import ApiClient, RequestSerialized
from clio_sdk.api_response import ApiResponse
from clio_sdk.rest import RESTResponseType


class MattersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def matter_create(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        matter_create_request: Annotated[Optional[MatterCreateRequest], Field(description="Request Body for Matters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatterShow:
        """Create a new Matter

        Outlines the parameters and data fields used when creating a new Matter

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param matter_create_request: Request Body for Matters
        :type matter_create_request: MatterCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_create_serialize(
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            matter_create_request=matter_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matter_create_with_http_info(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        matter_create_request: Annotated[Optional[MatterCreateRequest], Field(description="Request Body for Matters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatterShow]:
        """Create a new Matter

        Outlines the parameters and data fields used when creating a new Matter

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param matter_create_request: Request Body for Matters
        :type matter_create_request: MatterCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_create_serialize(
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            matter_create_request=matter_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matter_create_without_preload_content(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        matter_create_request: Annotated[Optional[MatterCreateRequest], Field(description="Request Body for Matters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new Matter

        Outlines the parameters and data fields used when creating a new Matter

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param matter_create_request: Request Body for Matters
        :type matter_create_request: MatterCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_create_serialize(
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            matter_create_request=matter_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matter_create_serialize(
        self,
        x_api_version,
        custom_field_ids,
        fields,
        matter_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if custom_field_ids is not None:
            
            _query_params.append(('custom_field_ids[]', custom_field_ids))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter
        if matter_create_request is not None:
            _body_params = matter_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/matters.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matter_destroy(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a single Matter

        Outlines the parameters, optional and required, used when deleting the record for a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_destroy_serialize(
            id=id,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matter_destroy_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a single Matter

        Outlines the parameters, optional and required, used when deleting the record for a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_destroy_serialize(
            id=id,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matter_destroy_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a single Matter

        Outlines the parameters, optional and required, used when deleting the record for a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_destroy_serialize(
            id=id,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matter_destroy_serialize(
        self,
        id,
        x_api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/matters/{id}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matter_index(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        billable: Annotated[Optional[StrictBool], Field(description="Filter Matter records to those which are billable.")] = None,
        client_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        close_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        created_since: Annotated[Optional[datetime], Field(description="Filter Matter records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        custom_field_values: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        grant_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Grant. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        group_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Group. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        ids: Annotated[Optional[StrictInt], Field(description="Filter Matter records to those having the specified unique identifiers.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of Matter records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        notification_event_subscriber_user_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        open_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the open date. The date should be provided in the format YYYY-MM-DD.  e.g. `?open_date==2020-01-01`, `?open_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?open_date[]=>=2020-01-01&open_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Orders the Matter records by the given field. Default: `id(asc)`.")] = None,
        originating_attorney_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        pending_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the pending date. The date should be provided in the format YYYY-MM-DD.  e.g. `?pending_date==2020-01-01`, `?pending_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?pending_date[]=>=2020-01-01&pending_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        practice_area_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single PracticeArea. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Wildcard search for `display_number`, `number` or `description` matching a given string, as well as the `first_name`, `last_name` or `name` of the associated client.")] = None,
        responsible_attorney_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter Matter records to those with a given status. It accepts comma-separated statuses, e.g. `open,pending`.")] = None,
        subscriber_user_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        updated_since: Annotated[Optional[datetime], Field(description="Filter Matter records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatterList:
        """Return the data for all Matters

        Outlines the parameters, optional and required, used when requesting the data for all Matters

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param billable: Filter Matter records to those which are billable.
        :type billable: bool
        :param client_id: The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type client_id: int
        :param close_date: Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type close_date: str
        :param created_since: Filter Matter records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param custom_field_values: Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` 
        :type custom_field_values: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param grant_id: The unique identifier for a single Grant. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type grant_id: int
        :param group_id: The unique identifier for a single Group. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type group_id: int
        :param ids: Filter Matter records to those having the specified unique identifiers.
        :type ids: int
        :param limit: A limit on the number of Matter records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param notification_event_subscriber_user_id: The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type notification_event_subscriber_user_id: int
        :param open_date: Filter Matter records by the open date. The date should be provided in the format YYYY-MM-DD.  e.g. `?open_date==2020-01-01`, `?open_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?open_date[]=>=2020-01-01&open_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type open_date: str
        :param order: Orders the Matter records by the given field. Default: `id(asc)`.
        :type order: str
        :param originating_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type originating_attorney_id: int
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param pending_date: Filter Matter records by the pending date. The date should be provided in the format YYYY-MM-DD.  e.g. `?pending_date==2020-01-01`, `?pending_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?pending_date[]=>=2020-01-01&pending_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type pending_date: str
        :param practice_area_id: The unique identifier for a single PracticeArea. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type practice_area_id: int
        :param query: Wildcard search for `display_number`, `number` or `description` matching a given string, as well as the `first_name`, `last_name` or `name` of the associated client.
        :type query: str
        :param responsible_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type responsible_attorney_id: int
        :param status: Filter Matter records to those with a given status. It accepts comma-separated statuses, e.g. `open,pending`.
        :type status: str
        :param subscriber_user_id: The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type subscriber_user_id: int
        :param updated_since: Filter Matter records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_index_serialize(
            x_api_version=x_api_version,
            billable=billable,
            client_id=client_id,
            close_date=close_date,
            created_since=created_since,
            custom_field_ids=custom_field_ids,
            custom_field_values=custom_field_values,
            fields=fields,
            grant_id=grant_id,
            group_id=group_id,
            ids=ids,
            limit=limit,
            notification_event_subscriber_user_id=notification_event_subscriber_user_id,
            open_date=open_date,
            order=order,
            originating_attorney_id=originating_attorney_id,
            page_token=page_token,
            pending_date=pending_date,
            practice_area_id=practice_area_id,
            query=query,
            responsible_attorney_id=responsible_attorney_id,
            status=status,
            subscriber_user_id=subscriber_user_id,
            updated_since=updated_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matter_index_with_http_info(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        billable: Annotated[Optional[StrictBool], Field(description="Filter Matter records to those which are billable.")] = None,
        client_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        close_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        created_since: Annotated[Optional[datetime], Field(description="Filter Matter records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        custom_field_values: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        grant_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Grant. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        group_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Group. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        ids: Annotated[Optional[StrictInt], Field(description="Filter Matter records to those having the specified unique identifiers.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of Matter records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        notification_event_subscriber_user_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        open_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the open date. The date should be provided in the format YYYY-MM-DD.  e.g. `?open_date==2020-01-01`, `?open_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?open_date[]=>=2020-01-01&open_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Orders the Matter records by the given field. Default: `id(asc)`.")] = None,
        originating_attorney_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        pending_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the pending date. The date should be provided in the format YYYY-MM-DD.  e.g. `?pending_date==2020-01-01`, `?pending_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?pending_date[]=>=2020-01-01&pending_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        practice_area_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single PracticeArea. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Wildcard search for `display_number`, `number` or `description` matching a given string, as well as the `first_name`, `last_name` or `name` of the associated client.")] = None,
        responsible_attorney_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter Matter records to those with a given status. It accepts comma-separated statuses, e.g. `open,pending`.")] = None,
        subscriber_user_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        updated_since: Annotated[Optional[datetime], Field(description="Filter Matter records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatterList]:
        """Return the data for all Matters

        Outlines the parameters, optional and required, used when requesting the data for all Matters

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param billable: Filter Matter records to those which are billable.
        :type billable: bool
        :param client_id: The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type client_id: int
        :param close_date: Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type close_date: str
        :param created_since: Filter Matter records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param custom_field_values: Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` 
        :type custom_field_values: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param grant_id: The unique identifier for a single Grant. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type grant_id: int
        :param group_id: The unique identifier for a single Group. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type group_id: int
        :param ids: Filter Matter records to those having the specified unique identifiers.
        :type ids: int
        :param limit: A limit on the number of Matter records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param notification_event_subscriber_user_id: The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type notification_event_subscriber_user_id: int
        :param open_date: Filter Matter records by the open date. The date should be provided in the format YYYY-MM-DD.  e.g. `?open_date==2020-01-01`, `?open_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?open_date[]=>=2020-01-01&open_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type open_date: str
        :param order: Orders the Matter records by the given field. Default: `id(asc)`.
        :type order: str
        :param originating_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type originating_attorney_id: int
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param pending_date: Filter Matter records by the pending date. The date should be provided in the format YYYY-MM-DD.  e.g. `?pending_date==2020-01-01`, `?pending_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?pending_date[]=>=2020-01-01&pending_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type pending_date: str
        :param practice_area_id: The unique identifier for a single PracticeArea. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type practice_area_id: int
        :param query: Wildcard search for `display_number`, `number` or `description` matching a given string, as well as the `first_name`, `last_name` or `name` of the associated client.
        :type query: str
        :param responsible_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type responsible_attorney_id: int
        :param status: Filter Matter records to those with a given status. It accepts comma-separated statuses, e.g. `open,pending`.
        :type status: str
        :param subscriber_user_id: The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type subscriber_user_id: int
        :param updated_since: Filter Matter records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_index_serialize(
            x_api_version=x_api_version,
            billable=billable,
            client_id=client_id,
            close_date=close_date,
            created_since=created_since,
            custom_field_ids=custom_field_ids,
            custom_field_values=custom_field_values,
            fields=fields,
            grant_id=grant_id,
            group_id=group_id,
            ids=ids,
            limit=limit,
            notification_event_subscriber_user_id=notification_event_subscriber_user_id,
            open_date=open_date,
            order=order,
            originating_attorney_id=originating_attorney_id,
            page_token=page_token,
            pending_date=pending_date,
            practice_area_id=practice_area_id,
            query=query,
            responsible_attorney_id=responsible_attorney_id,
            status=status,
            subscriber_user_id=subscriber_user_id,
            updated_since=updated_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matter_index_without_preload_content(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        billable: Annotated[Optional[StrictBool], Field(description="Filter Matter records to those which are billable.")] = None,
        client_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        close_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        created_since: Annotated[Optional[datetime], Field(description="Filter Matter records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        custom_field_values: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        grant_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Grant. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        group_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Group. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        ids: Annotated[Optional[StrictInt], Field(description="Filter Matter records to those having the specified unique identifiers.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of Matter records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        notification_event_subscriber_user_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        open_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the open date. The date should be provided in the format YYYY-MM-DD.  e.g. `?open_date==2020-01-01`, `?open_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?open_date[]=>=2020-01-01&open_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        order: Annotated[Optional[StrictStr], Field(description="Orders the Matter records by the given field. Default: `id(asc)`.")] = None,
        originating_attorney_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        pending_date: Annotated[Optional[StrictStr], Field(description="Filter Matter records by the pending date. The date should be provided in the format YYYY-MM-DD.  e.g. `?pending_date==2020-01-01`, `?pending_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?pending_date[]=>=2020-01-01&pending_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. ")] = None,
        practice_area_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single PracticeArea. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Wildcard search for `display_number`, `number` or `description` matching a given string, as well as the `first_name`, `last_name` or `name` of the associated client.")] = None,
        responsible_attorney_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Filter Matter records to those with a given status. It accepts comma-separated statuses, e.g. `open,pending`.")] = None,
        subscriber_user_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.")] = None,
        updated_since: Annotated[Optional[datetime], Field(description="Filter Matter records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the data for all Matters

        Outlines the parameters, optional and required, used when requesting the data for all Matters

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param billable: Filter Matter records to those which are billable.
        :type billable: bool
        :param client_id: The unique identifier for a single Contact. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type client_id: int
        :param close_date: Filter Matter records by the close date. The date should be provided in the format YYYY-MM-DD.  e.g. `?close_date==2020-01-01`, `?close_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?close_date[]=>=2020-01-01&close_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type close_date: str
        :param created_since: Filter Matter records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param custom_field_values: Filter records to only those with the given custom field(s) set. The value is compared using the operator provided, or, if the value type only supports one operator, the supported operator is used. In the latter case, no check for operator is performed on the input string. The key for the custom field value filter is the custom_field.id. e.g. `custom_field_values[12345]` If an operator is used for a type that does not support it, an `400 Bad Request` is returned.  *Supported operators:* * `checkbox`, `contact`, `matter`, `picklist` : `=`  e.g. `?custom_field_values[1]=42`  * `currency`, `date`, `time`, `numeric` : `=`, `<`, `>`, `<=`, `>=`  e.g. `?custom_field_values[1]=>=105.4`  * `email`, `text_area`, `text_line`, `url` : `=`  e.g. `?custom_field_values[1]=url_encoded`  *Multiple conditions for the same custom field:*  If you want to use more than one operator to filter a custom field, you can do so by passing in an array of values. e.g. `?custom_field_values[1]=[<=50, >=45]` 
        :type custom_field_values: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param grant_id: The unique identifier for a single Grant. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type grant_id: int
        :param group_id: The unique identifier for a single Group. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type group_id: int
        :param ids: Filter Matter records to those having the specified unique identifiers.
        :type ids: int
        :param limit: A limit on the number of Matter records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param notification_event_subscriber_user_id: The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type notification_event_subscriber_user_id: int
        :param open_date: Filter Matter records by the open date. The date should be provided in the format YYYY-MM-DD.  e.g. `?open_date==2020-01-01`, `?open_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?open_date[]=>=2020-01-01&open_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type open_date: str
        :param order: Orders the Matter records by the given field. Default: `id(asc)`.
        :type order: str
        :param originating_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type originating_attorney_id: int
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param pending_date: Filter Matter records by the pending date. The date should be provided in the format YYYY-MM-DD.  e.g. `?pending_date==2020-01-01`, `?pending_date=<=2021-12-31`  You can provide more than one value to narrow the results of this filter. You can do so by passing several individual values and appending `[]` to the parameter name.  e.g. `?pending_date[]=>=2020-01-01&pending_date[]=<=2021-12-31`  Note that, when providing multiple values for this filter, only Matter records that meet *all* filter conditions will be returned. 
        :type pending_date: str
        :param practice_area_id: The unique identifier for a single PracticeArea. The keyword `null` is not valid for this field. The list will be filtered to include only the Matter records with the matching property.
        :type practice_area_id: int
        :param query: Wildcard search for `display_number`, `number` or `description` matching a given string, as well as the `first_name`, `last_name` or `name` of the associated client.
        :type query: str
        :param responsible_attorney_id: The unique identifier for a single User. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type responsible_attorney_id: int
        :param status: Filter Matter records to those with a given status. It accepts comma-separated statuses, e.g. `open,pending`.
        :type status: str
        :param subscriber_user_id: The unique identifier for a single NotificationEventSubscriber. Use the keyword `null` to match those without a Matter. The list will be filtered to include only the Matter records with the matching property.
        :type subscriber_user_id: int
        :param updated_since: Filter Matter records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_index_serialize(
            x_api_version=x_api_version,
            billable=billable,
            client_id=client_id,
            close_date=close_date,
            created_since=created_since,
            custom_field_ids=custom_field_ids,
            custom_field_values=custom_field_values,
            fields=fields,
            grant_id=grant_id,
            group_id=group_id,
            ids=ids,
            limit=limit,
            notification_event_subscriber_user_id=notification_event_subscriber_user_id,
            open_date=open_date,
            order=order,
            originating_attorney_id=originating_attorney_id,
            page_token=page_token,
            pending_date=pending_date,
            practice_area_id=practice_area_id,
            query=query,
            responsible_attorney_id=responsible_attorney_id,
            status=status,
            subscriber_user_id=subscriber_user_id,
            updated_since=updated_since,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matter_index_serialize(
        self,
        x_api_version,
        billable,
        client_id,
        close_date,
        created_since,
        custom_field_ids,
        custom_field_values,
        fields,
        grant_id,
        group_id,
        ids,
        limit,
        notification_event_subscriber_user_id,
        open_date,
        order,
        originating_attorney_id,
        page_token,
        pending_date,
        practice_area_id,
        query,
        responsible_attorney_id,
        status,
        subscriber_user_id,
        updated_since,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if billable is not None:
            
            _query_params.append(('billable', billable))
            
        if client_id is not None:
            
            _query_params.append(('client_id', client_id))
            
        if close_date is not None:
            
            _query_params.append(('close_date[]', close_date))
            
        if created_since is not None:
            if isinstance(created_since, datetime):
                _query_params.append(
                    (
                        'created_since',
                        created_since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_since', created_since))
            
        if custom_field_ids is not None:
            
            _query_params.append(('custom_field_ids[]', custom_field_ids))
            
        if custom_field_values is not None:
            
            _query_params.append(('custom_field_values', custom_field_values))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if grant_id is not None:
            
            _query_params.append(('grant_id', grant_id))
            
        if group_id is not None:
            
            _query_params.append(('group_id', group_id))
            
        if ids is not None:
            
            _query_params.append(('ids[]', ids))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if notification_event_subscriber_user_id is not None:
            
            _query_params.append(('notification_event_subscriber_user_id', notification_event_subscriber_user_id))
            
        if open_date is not None:
            
            _query_params.append(('open_date[]', open_date))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if originating_attorney_id is not None:
            
            _query_params.append(('originating_attorney_id', originating_attorney_id))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if pending_date is not None:
            
            _query_params.append(('pending_date[]', pending_date))
            
        if practice_area_id is not None:
            
            _query_params.append(('practice_area_id', practice_area_id))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if responsible_attorney_id is not None:
            
            _query_params.append(('responsible_attorney_id', responsible_attorney_id))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if subscriber_user_id is not None:
            
            _query_params.append(('subscriber_user_id', subscriber_user_id))
            
        if updated_since is not None:
            if isinstance(updated_since, datetime):
                _query_params.append(
                    (
                        'updated_since',
                        updated_since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_since', updated_since))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/matters.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matter_show(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        if_modified_since: Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatterShow:
        """Return the data for a single Matter

        Outlines the parameters, optional and required, used when requesting the data for a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_show_serialize(
            id=id,
            if_modified_since=if_modified_since,
            if_none_match=if_none_match,
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matter_show_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        if_modified_since: Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatterShow]:
        """Return the data for a single Matter

        Outlines the parameters, optional and required, used when requesting the data for a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_show_serialize(
            id=id,
            if_modified_since=if_modified_since,
            if_none_match=if_none_match,
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matter_show_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        if_modified_since: Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the data for a single Matter

        Outlines the parameters, optional and required, used when requesting the data for a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_show_serialize(
            id=id,
            if_modified_since=if_modified_since,
            if_none_match=if_none_match,
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matter_show_serialize(
        self,
        id,
        if_modified_since,
        if_none_match,
        x_api_version,
        custom_field_ids,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if custom_field_ids is not None:
            
            _query_params.append(('custom_field_ids[]', custom_field_ids))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if if_modified_since is not None:
            _header_params['IF-MODIFIED-SINCE'] = if_modified_since
        if if_none_match is not None:
            _header_params['IF-NONE-MATCH'] = if_none_match
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/matters/{id}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def matter_update(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        matter_update_request: Annotated[Optional[MatterUpdateRequest], Field(description="Request Body for Matters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MatterShow:
        """Update a single Matter

        Outlines the parameters and data fields used when updating a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param matter_update_request: Request Body for Matters
        :type matter_update_request: MatterUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_update_serialize(
            id=id,
            if_match=if_match,
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            matter_update_request=matter_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def matter_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        matter_update_request: Annotated[Optional[MatterUpdateRequest], Field(description="Request Body for Matters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MatterShow]:
        """Update a single Matter

        Outlines the parameters and data fields used when updating a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param matter_update_request: Request Body for Matters
        :type matter_update_request: MatterUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_update_serialize(
            id=id,
            if_match=if_match,
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            matter_update_request=matter_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def matter_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the Matter.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        custom_field_ids: Annotated[Optional[StrictInt], Field(description="Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        matter_update_request: Annotated[Optional[MatterUpdateRequest], Field(description="Request Body for Matters")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a single Matter

        Outlines the parameters and data fields used when updating a single Matter

        :param id: The unique identifier for the Matter. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param custom_field_ids: Filter Matter's custom_field_values to only include values for the given custom field unique identifiers.
        :type custom_field_ids: int
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param matter_update_request: Request Body for Matters
        :type matter_update_request: MatterUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._matter_update_serialize(
            id=id,
            if_match=if_match,
            x_api_version=x_api_version,
            custom_field_ids=custom_field_ids,
            fields=fields,
            matter_update_request=matter_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MatterShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _matter_update_serialize(
        self,
        id,
        if_match,
        x_api_version,
        custom_field_ids,
        fields,
        matter_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if custom_field_ids is not None:
            
            _query_params.append(('custom_field_ids[]', custom_field_ids))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if if_match is not None:
            _header_params['IF-MATCH'] = if_match
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter
        if matter_update_request is not None:
            _body_params = matter_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/matters/{id}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


