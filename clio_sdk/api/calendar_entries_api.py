# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from clio_sdk.models.calendar_entry_create_request import CalendarEntryCreateRequest
from clio_sdk.models.calendar_entry_list import CalendarEntryList
from clio_sdk.models.calendar_entry_show import CalendarEntryShow
from clio_sdk.models.calendar_entry_update_request import CalendarEntryUpdateRequest

from clio_sdk.api_client import ApiClient, RequestSerialized
from clio_sdk.api_response import ApiResponse
from clio_sdk.rest import RESTResponseType


class CalendarEntriesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def calendar_entry_create(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        calendar_entry_create_request: Annotated[Optional[CalendarEntryCreateRequest], Field(description="Request Body for Calendar Entries")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CalendarEntryShow:
        """Create a new CalendarEntry

        Outlines the parameters and data fields used when creating a new CalendarEntry

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param calendar_entry_create_request: Request Body for Calendar Entries
        :type calendar_entry_create_request: CalendarEntryCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_create_serialize(
            x_api_version=x_api_version,
            fields=fields,
            calendar_entry_create_request=calendar_entry_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calendar_entry_create_with_http_info(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        calendar_entry_create_request: Annotated[Optional[CalendarEntryCreateRequest], Field(description="Request Body for Calendar Entries")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CalendarEntryShow]:
        """Create a new CalendarEntry

        Outlines the parameters and data fields used when creating a new CalendarEntry

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param calendar_entry_create_request: Request Body for Calendar Entries
        :type calendar_entry_create_request: CalendarEntryCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_create_serialize(
            x_api_version=x_api_version,
            fields=fields,
            calendar_entry_create_request=calendar_entry_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calendar_entry_create_without_preload_content(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        calendar_entry_create_request: Annotated[Optional[CalendarEntryCreateRequest], Field(description="Request Body for Calendar Entries")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a new CalendarEntry

        Outlines the parameters and data fields used when creating a new CalendarEntry

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param calendar_entry_create_request: Request Body for Calendar Entries
        :type calendar_entry_create_request: CalendarEntryCreateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_create_serialize(
            x_api_version=x_api_version,
            fields=fields,
            calendar_entry_create_request=calendar_entry_create_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calendar_entry_create_serialize(
        self,
        x_api_version,
        fields,
        calendar_entry_create_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter
        if calendar_entry_create_request is not None:
            _body_params = calendar_entry_create_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/calendar_entries.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calendar_entry_destroy(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a single CalendarEntry

        Outlines the parameters, optional and required, used when deleting the record for a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_destroy_serialize(
            id=id,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calendar_entry_destroy_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a single CalendarEntry

        Outlines the parameters, optional and required, used when deleting the record for a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_destroy_serialize(
            id=id,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calendar_entry_destroy_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a single CalendarEntry

        Outlines the parameters, optional and required, used when deleting the record for a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_destroy_serialize(
            id=id,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '403': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calendar_entry_destroy_serialize(
        self,
        id,
        x_api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/calendar_entries/{id}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calendar_entry_index(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        calendar_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Calendar. The keyword `null` is not valid for this field. The list will be filtered to include only the CalendarEntry records with the matching property.")] = None,
        created_since: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        expanded: Annotated[Optional[StrictBool], Field(description="Returns a record for each occurrence of a recurring calendar event.  Non-recurring calendar events are unaffected and returned as separate records regardless of the expanded setting.")] = None,
        external_property_name: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` ")] = None,
        external_property_value: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        var_from: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those that end on or after the provided time (Expects an ISO-8601 timestamp).")] = None,
        has_court_rule: Annotated[Optional[StrictBool], Field(description="Allows matching court rule on calendar entry.")] = None,
        ids: Annotated[Optional[StrictInt], Field(description="Filter CalendarEntry records to those having the specified unique identifiers.")] = None,
        is_all_day: Annotated[Optional[StrictBool], Field(description="Filter CalendarEntry records to those that are marked as all day events.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of CalendarEntry records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        matter_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a CalendarEntry. The list will be filtered to include only the CalendarEntry records with the matching property.")] = None,
        owner_entries_across_all_users: Annotated[Optional[StrictBool], Field(description="Returns CalendarEntry records for all users related to a matter. Requires matter id.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Allows matching search on calendar entry.")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter CalendarEntry records to those having a specific calendar visibility source (mobile, web).")] = None,
        to: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those that begin on or before the provided time (Expects an ISO-8601 timestamp).")] = None,
        updated_since: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        visible: Annotated[Optional[StrictBool], Field(description="Filter CalendarEntry records to those that are visible.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CalendarEntryList:
        """Return the data for all CalendarEntries

        Outlines the parameters, optional and required, used when requesting the data for all CalendarEntries

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param calendar_id: The unique identifier for a single Calendar. The keyword `null` is not valid for this field. The list will be filtered to include only the CalendarEntry records with the matching property.
        :type calendar_id: int
        :param created_since: Filter CalendarEntry records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param expanded: Returns a record for each occurrence of a recurring calendar event.  Non-recurring calendar events are unaffected and returned as separate records regardless of the expanded setting.
        :type expanded: bool
        :param external_property_name: Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` 
        :type external_property_name: str
        :param external_property_value: Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` 
        :type external_property_value: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param var_from: Filter CalendarEntry records to those that end on or after the provided time (Expects an ISO-8601 timestamp).
        :type var_from: datetime
        :param has_court_rule: Allows matching court rule on calendar entry.
        :type has_court_rule: bool
        :param ids: Filter CalendarEntry records to those having the specified unique identifiers.
        :type ids: int
        :param is_all_day: Filter CalendarEntry records to those that are marked as all day events.
        :type is_all_day: bool
        :param limit: A limit on the number of CalendarEntry records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a CalendarEntry. The list will be filtered to include only the CalendarEntry records with the matching property.
        :type matter_id: int
        :param owner_entries_across_all_users: Returns CalendarEntry records for all users related to a matter. Requires matter id.
        :type owner_entries_across_all_users: bool
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param query: Allows matching search on calendar entry.
        :type query: str
        :param source: Filter CalendarEntry records to those having a specific calendar visibility source (mobile, web).
        :type source: str
        :param to: Filter CalendarEntry records to those that begin on or before the provided time (Expects an ISO-8601 timestamp).
        :type to: datetime
        :param updated_since: Filter CalendarEntry records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param visible: Filter CalendarEntry records to those that are visible.
        :type visible: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_index_serialize(
            x_api_version=x_api_version,
            calendar_id=calendar_id,
            created_since=created_since,
            expanded=expanded,
            external_property_name=external_property_name,
            external_property_value=external_property_value,
            fields=fields,
            var_from=var_from,
            has_court_rule=has_court_rule,
            ids=ids,
            is_all_day=is_all_day,
            limit=limit,
            matter_id=matter_id,
            owner_entries_across_all_users=owner_entries_across_all_users,
            page_token=page_token,
            query=query,
            source=source,
            to=to,
            updated_since=updated_since,
            visible=visible,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calendar_entry_index_with_http_info(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        calendar_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Calendar. The keyword `null` is not valid for this field. The list will be filtered to include only the CalendarEntry records with the matching property.")] = None,
        created_since: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        expanded: Annotated[Optional[StrictBool], Field(description="Returns a record for each occurrence of a recurring calendar event.  Non-recurring calendar events are unaffected and returned as separate records regardless of the expanded setting.")] = None,
        external_property_name: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` ")] = None,
        external_property_value: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        var_from: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those that end on or after the provided time (Expects an ISO-8601 timestamp).")] = None,
        has_court_rule: Annotated[Optional[StrictBool], Field(description="Allows matching court rule on calendar entry.")] = None,
        ids: Annotated[Optional[StrictInt], Field(description="Filter CalendarEntry records to those having the specified unique identifiers.")] = None,
        is_all_day: Annotated[Optional[StrictBool], Field(description="Filter CalendarEntry records to those that are marked as all day events.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of CalendarEntry records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        matter_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a CalendarEntry. The list will be filtered to include only the CalendarEntry records with the matching property.")] = None,
        owner_entries_across_all_users: Annotated[Optional[StrictBool], Field(description="Returns CalendarEntry records for all users related to a matter. Requires matter id.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Allows matching search on calendar entry.")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter CalendarEntry records to those having a specific calendar visibility source (mobile, web).")] = None,
        to: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those that begin on or before the provided time (Expects an ISO-8601 timestamp).")] = None,
        updated_since: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        visible: Annotated[Optional[StrictBool], Field(description="Filter CalendarEntry records to those that are visible.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CalendarEntryList]:
        """Return the data for all CalendarEntries

        Outlines the parameters, optional and required, used when requesting the data for all CalendarEntries

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param calendar_id: The unique identifier for a single Calendar. The keyword `null` is not valid for this field. The list will be filtered to include only the CalendarEntry records with the matching property.
        :type calendar_id: int
        :param created_since: Filter CalendarEntry records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param expanded: Returns a record for each occurrence of a recurring calendar event.  Non-recurring calendar events are unaffected and returned as separate records regardless of the expanded setting.
        :type expanded: bool
        :param external_property_name: Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` 
        :type external_property_name: str
        :param external_property_value: Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` 
        :type external_property_value: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param var_from: Filter CalendarEntry records to those that end on or after the provided time (Expects an ISO-8601 timestamp).
        :type var_from: datetime
        :param has_court_rule: Allows matching court rule on calendar entry.
        :type has_court_rule: bool
        :param ids: Filter CalendarEntry records to those having the specified unique identifiers.
        :type ids: int
        :param is_all_day: Filter CalendarEntry records to those that are marked as all day events.
        :type is_all_day: bool
        :param limit: A limit on the number of CalendarEntry records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a CalendarEntry. The list will be filtered to include only the CalendarEntry records with the matching property.
        :type matter_id: int
        :param owner_entries_across_all_users: Returns CalendarEntry records for all users related to a matter. Requires matter id.
        :type owner_entries_across_all_users: bool
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param query: Allows matching search on calendar entry.
        :type query: str
        :param source: Filter CalendarEntry records to those having a specific calendar visibility source (mobile, web).
        :type source: str
        :param to: Filter CalendarEntry records to those that begin on or before the provided time (Expects an ISO-8601 timestamp).
        :type to: datetime
        :param updated_since: Filter CalendarEntry records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param visible: Filter CalendarEntry records to those that are visible.
        :type visible: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_index_serialize(
            x_api_version=x_api_version,
            calendar_id=calendar_id,
            created_since=created_since,
            expanded=expanded,
            external_property_name=external_property_name,
            external_property_value=external_property_value,
            fields=fields,
            var_from=var_from,
            has_court_rule=has_court_rule,
            ids=ids,
            is_all_day=is_all_day,
            limit=limit,
            matter_id=matter_id,
            owner_entries_across_all_users=owner_entries_across_all_users,
            page_token=page_token,
            query=query,
            source=source,
            to=to,
            updated_since=updated_since,
            visible=visible,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calendar_entry_index_without_preload_content(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        calendar_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Calendar. The keyword `null` is not valid for this field. The list will be filtered to include only the CalendarEntry records with the matching property.")] = None,
        created_since: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        expanded: Annotated[Optional[StrictBool], Field(description="Returns a record for each occurrence of a recurring calendar event.  Non-recurring calendar events are unaffected and returned as separate records regardless of the expanded setting.")] = None,
        external_property_name: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` ")] = None,
        external_property_value: Annotated[Optional[StrictStr], Field(description="Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        var_from: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those that end on or after the provided time (Expects an ISO-8601 timestamp).")] = None,
        has_court_rule: Annotated[Optional[StrictBool], Field(description="Allows matching court rule on calendar entry.")] = None,
        ids: Annotated[Optional[StrictInt], Field(description="Filter CalendarEntry records to those having the specified unique identifiers.")] = None,
        is_all_day: Annotated[Optional[StrictBool], Field(description="Filter CalendarEntry records to those that are marked as all day events.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of CalendarEntry records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        matter_id: Annotated[Optional[StrictInt], Field(description="The unique identifier for a single Matter. Use the keyword `null` to match those without a CalendarEntry. The list will be filtered to include only the CalendarEntry records with the matching property.")] = None,
        owner_entries_across_all_users: Annotated[Optional[StrictBool], Field(description="Returns CalendarEntry records for all users related to a matter. Requires matter id.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        query: Annotated[Optional[StrictStr], Field(description="Allows matching search on calendar entry.")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter CalendarEntry records to those having a specific calendar visibility source (mobile, web).")] = None,
        to: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those that begin on or before the provided time (Expects an ISO-8601 timestamp).")] = None,
        updated_since: Annotated[Optional[datetime], Field(description="Filter CalendarEntry records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).")] = None,
        visible: Annotated[Optional[StrictBool], Field(description="Filter CalendarEntry records to those that are visible.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the data for all CalendarEntries

        Outlines the parameters, optional and required, used when requesting the data for all CalendarEntries

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param calendar_id: The unique identifier for a single Calendar. The keyword `null` is not valid for this field. The list will be filtered to include only the CalendarEntry records with the matching property.
        :type calendar_id: int
        :param created_since: Filter CalendarEntry records to those having the `created_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type created_since: datetime
        :param expanded: Returns a record for each occurrence of a recurring calendar event.  Non-recurring calendar events are unaffected and returned as separate records regardless of the expanded setting.
        :type expanded: bool
        :param external_property_name: Filter records to only those with the given external property(s) name set.  e.g. `?external_property_name=Name` 
        :type external_property_name: str
        :param external_property_value: Filter records to only those with the given external property(s) value set. Requires external property name as well.  e.g. `?external_property_name=Name&external_property_value=Value` 
        :type external_property_value: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param var_from: Filter CalendarEntry records to those that end on or after the provided time (Expects an ISO-8601 timestamp).
        :type var_from: datetime
        :param has_court_rule: Allows matching court rule on calendar entry.
        :type has_court_rule: bool
        :param ids: Filter CalendarEntry records to those having the specified unique identifiers.
        :type ids: int
        :param is_all_day: Filter CalendarEntry records to those that are marked as all day events.
        :type is_all_day: bool
        :param limit: A limit on the number of CalendarEntry records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param matter_id: The unique identifier for a single Matter. Use the keyword `null` to match those without a CalendarEntry. The list will be filtered to include only the CalendarEntry records with the matching property.
        :type matter_id: int
        :param owner_entries_across_all_users: Returns CalendarEntry records for all users related to a matter. Requires matter id.
        :type owner_entries_across_all_users: bool
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param query: Allows matching search on calendar entry.
        :type query: str
        :param source: Filter CalendarEntry records to those having a specific calendar visibility source (mobile, web).
        :type source: str
        :param to: Filter CalendarEntry records to those that begin on or before the provided time (Expects an ISO-8601 timestamp).
        :type to: datetime
        :param updated_since: Filter CalendarEntry records to those having the `updated_at` field after a specific time. (Expects an ISO-8601 timestamp).
        :type updated_since: datetime
        :param visible: Filter CalendarEntry records to those that are visible.
        :type visible: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_index_serialize(
            x_api_version=x_api_version,
            calendar_id=calendar_id,
            created_since=created_since,
            expanded=expanded,
            external_property_name=external_property_name,
            external_property_value=external_property_value,
            fields=fields,
            var_from=var_from,
            has_court_rule=has_court_rule,
            ids=ids,
            is_all_day=is_all_day,
            limit=limit,
            matter_id=matter_id,
            owner_entries_across_all_users=owner_entries_across_all_users,
            page_token=page_token,
            query=query,
            source=source,
            to=to,
            updated_since=updated_since,
            visible=visible,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calendar_entry_index_serialize(
        self,
        x_api_version,
        calendar_id,
        created_since,
        expanded,
        external_property_name,
        external_property_value,
        fields,
        var_from,
        has_court_rule,
        ids,
        is_all_day,
        limit,
        matter_id,
        owner_entries_across_all_users,
        page_token,
        query,
        source,
        to,
        updated_since,
        visible,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if calendar_id is not None:
            
            _query_params.append(('calendar_id', calendar_id))
            
        if created_since is not None:
            if isinstance(created_since, datetime):
                _query_params.append(
                    (
                        'created_since',
                        created_since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('created_since', created_since))
            
        if expanded is not None:
            
            _query_params.append(('expanded', expanded))
            
        if external_property_name is not None:
            
            _query_params.append(('external_property_name', external_property_name))
            
        if external_property_value is not None:
            
            _query_params.append(('external_property_value', external_property_value))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if var_from is not None:
            if isinstance(var_from, datetime):
                _query_params.append(
                    (
                        'from',
                        var_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from', var_from))
            
        if has_court_rule is not None:
            
            _query_params.append(('has_court_rule', has_court_rule))
            
        if ids is not None:
            
            _query_params.append(('ids[]', ids))
            
        if is_all_day is not None:
            
            _query_params.append(('is_all_day', is_all_day))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if matter_id is not None:
            
            _query_params.append(('matter_id', matter_id))
            
        if owner_entries_across_all_users is not None:
            
            _query_params.append(('owner_entries_across_all_users', owner_entries_across_all_users))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if to is not None:
            if isinstance(to, datetime):
                _query_params.append(
                    (
                        'to',
                        to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to', to))
            
        if updated_since is not None:
            if isinstance(updated_since, datetime):
                _query_params.append(
                    (
                        'updated_since',
                        updated_since.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updated_since', updated_since))
            
        if visible is not None:
            
            _query_params.append(('visible', visible))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/calendar_entries.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calendar_entry_show(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        if_modified_since: Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CalendarEntryShow:
        """Return the data for a single CalendarEntry

        Outlines the parameters, optional and required, used when requesting the data for a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_show_serialize(
            id=id,
            if_modified_since=if_modified_since,
            if_none_match=if_none_match,
            x_api_version=x_api_version,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calendar_entry_show_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        if_modified_since: Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CalendarEntryShow]:
        """Return the data for a single CalendarEntry

        Outlines the parameters, optional and required, used when requesting the data for a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_show_serialize(
            id=id,
            if_modified_since=if_modified_since,
            if_none_match=if_none_match,
            x_api_version=x_api_version,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calendar_entry_show_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        if_modified_since: Annotated[Optional[date], Field(description="The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).")] = None,
        if_none_match: Annotated[Optional[StrictStr], Field(description="The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Return the data for a single CalendarEntry

        Outlines the parameters, optional and required, used when requesting the data for a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param if_modified_since: The server will send the requested resource with a 200 status, but only if it has been modified after the given date. (Expects an RFC 2822 timestamp).
        :type if_modified_since: date
        :param if_none_match: The server will send the requested resource with a 200 status, but only if the existing resource's [ETag](#section/ETags) doesn't match any of the values listed.
        :type if_none_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_show_serialize(
            id=id,
            if_modified_since=if_modified_since,
            if_none_match=if_none_match,
            x_api_version=x_api_version,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '401': "Error",
            '429': "Error",
            '304': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calendar_entry_show_serialize(
        self,
        id,
        if_modified_since,
        if_none_match,
        x_api_version,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if if_modified_since is not None:
            _header_params['IF-MODIFIED-SINCE'] = if_modified_since
        if if_none_match is not None:
            _header_params['IF-NONE-MATCH'] = if_none_match
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/calendar_entries/{id}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def calendar_entry_update(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        calendar_entry_update_request: Annotated[Optional[CalendarEntryUpdateRequest], Field(description="Request Body for Calendar Entries")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CalendarEntryShow:
        """Update a single CalendarEntry

        Outlines the parameters and data fields used when updating a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param calendar_entry_update_request: Request Body for Calendar Entries
        :type calendar_entry_update_request: CalendarEntryUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_update_serialize(
            id=id,
            if_match=if_match,
            x_api_version=x_api_version,
            fields=fields,
            calendar_entry_update_request=calendar_entry_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def calendar_entry_update_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        calendar_entry_update_request: Annotated[Optional[CalendarEntryUpdateRequest], Field(description="Request Body for Calendar Entries")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CalendarEntryShow]:
        """Update a single CalendarEntry

        Outlines the parameters and data fields used when updating a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param calendar_entry_update_request: Request Body for Calendar Entries
        :type calendar_entry_update_request: CalendarEntryUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_update_serialize(
            id=id,
            if_match=if_match,
            x_api_version=x_api_version,
            fields=fields,
            calendar_entry_update_request=calendar_entry_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def calendar_entry_update_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The unique identifier for the CalendarEntry.")],
        if_match: Annotated[Optional[StrictStr], Field(description="The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).")] = None,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        calendar_entry_update_request: Annotated[Optional[CalendarEntryUpdateRequest], Field(description="Request Body for Calendar Entries")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a single CalendarEntry

        Outlines the parameters and data fields used when updating a single CalendarEntry

        :param id: The unique identifier for the CalendarEntry. (required)
        :type id: int
        :param if_match: The server will update the requested resource and send back a 200 status, but only if value in the header matches the existing resource's [ETag](#section/ETags).
        :type if_match: str
        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param calendar_entry_update_request: Request Body for Calendar Entries
        :type calendar_entry_update_request: CalendarEntryUpdateRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._calendar_entry_update_serialize(
            id=id,
            if_match=if_match,
            x_api_version=x_api_version,
            fields=fields,
            calendar_entry_update_request=calendar_entry_update_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CalendarEntryShow",
            '400': "Error",
            '403': "Error",
            '404': "Error",
            '422': "Error",
            '401': "Error",
            '429': "Error",
            '412': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _calendar_entry_update_serialize(
        self,
        id,
        if_match,
        x_api_version,
        fields,
        calendar_entry_update_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if if_match is not None:
            _header_params['IF-MATCH'] = if_match
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter
        if calendar_entry_update_request is not None:
            _body_params = calendar_entry_update_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded', 
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/calendar_entries/{id}.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


