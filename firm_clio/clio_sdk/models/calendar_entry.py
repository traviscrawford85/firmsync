# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from clio_sdk.models.activity_base import ActivityBase
from clio_sdk.models.attendee_base import AttendeeBase
from clio_sdk.models.calendar_base import CalendarBase
from clio_sdk.models.calendar_entry_base import CalendarEntryBase
from clio_sdk.models.calendar_entry_event_type_base import CalendarEntryEventTypeBase
from clio_sdk.models.conference_meeting_base import ConferenceMeetingBase
from clio_sdk.models.external_property_base import ExternalPropertyBase
from clio_sdk.models.matter_base import MatterBase
from clio_sdk.models.matter_docket_base import MatterDocketBase
from clio_sdk.models.reminder_base import ReminderBase
from typing import Optional, Set
from typing_extensions import Self

class CalendarEntry(BaseModel):
    """
    CalendarEntry
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the *CalendarEntry*")
    etag: Optional[StrictStr] = Field(default=None, description="ETag for the *CalendarEntry*")
    summary: Optional[StrictStr] = Field(default=None, description="A short summary of the *CalendarEntry*")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of the *CalendarEntry*")
    location: Optional[StrictStr] = Field(default=None, description="The geographic location of the *CalendarEntry*")
    start_at: Optional[datetime] = Field(default=None, description="The time the *CalendarEntry* starts (as an ISO-8601 timestamp)")
    end_at: Optional[datetime] = Field(default=None, description="The time the *CalendarEntry* ends (as an ISO-8601 timestamp)")
    all_day: Optional[StrictBool] = Field(default=None, description="Whether the event is all day")
    recurrence_rule: Optional[StrictStr] = Field(default=None, description="Recurrence rule for expanding")
    parent_calendar_entry_id: Optional[StrictInt] = Field(default=None, description="Identifier for the parent *CalendarEntry*")
    court_rule: Optional[StrictBool] = Field(default=None, description="Whether this event is associated with a Court Rule")
    created_at: Optional[datetime] = Field(default=None, description="The time the *CalendarEntry* was created (as a ISO-8601 timestamp)")
    updated_at: Optional[datetime] = Field(default=None, description="The time the *CalendarEntry* was last updated (as a ISO-8601 timestamp)")
    permission: Optional[StrictStr] = Field(default=None, description="The view permission for the current user, will return 'viewer' when permission is 'limited_viewer' and the user is an attendee.")
    calendar_owner_id: Optional[StrictInt] = Field(default=None, description="The id of the calendar owner.")
    start_at_time_zone: Optional[StrictStr] = Field(default=None, description="Original start at time zone of the event.")
    time_entries_count: Optional[StrictInt] = Field(default=None, description="The number of `TimeEntry` activities associated with the *CalendarEntry*")
    time_entries: Optional[List[ActivityBase]] = Field(default=None, description="Activity")
    conference_meeting: Optional[ConferenceMeetingBase] = None
    matter: Optional[MatterBase] = None
    matter_docket: Optional[MatterDocketBase] = None
    calendar_owner: Optional[CalendarBase] = None
    parent_calendar_entry: Optional[CalendarEntryBase] = None
    calendar_entry_event_type: Optional[CalendarEntryEventTypeBase] = None
    attendees: Optional[List[AttendeeBase]] = Field(default=None, description="Attendee")
    calendars: Optional[List[CalendarBase]] = Field(default=None, description="Calendar")
    reminders: Optional[List[ReminderBase]] = Field(default=None, description="Reminder")
    external_properties: Optional[List[ExternalPropertyBase]] = Field(default=None, description="ExternalProperty")
    __properties: ClassVar[List[str]] = ["id", "etag", "summary", "description", "location", "start_at", "end_at", "all_day", "recurrence_rule", "parent_calendar_entry_id", "court_rule", "created_at", "updated_at", "permission", "calendar_owner_id", "start_at_time_zone", "time_entries_count", "time_entries", "conference_meeting", "matter", "matter_docket", "calendar_owner", "parent_calendar_entry", "calendar_entry_event_type", "attendees", "calendars", "reminders", "external_properties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in time_entries (list)
        _items = []
        if self.time_entries:
            for _item_time_entries in self.time_entries:
                if _item_time_entries:
                    _items.append(_item_time_entries.to_dict())
            _dict['time_entries'] = _items
        # override the default output from pydantic by calling `to_dict()` of conference_meeting
        if self.conference_meeting:
            _dict['conference_meeting'] = self.conference_meeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matter
        if self.matter:
            _dict['matter'] = self.matter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matter_docket
        if self.matter_docket:
            _dict['matter_docket'] = self.matter_docket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_owner
        if self.calendar_owner:
            _dict['calendar_owner'] = self.calendar_owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_calendar_entry
        if self.parent_calendar_entry:
            _dict['parent_calendar_entry'] = self.parent_calendar_entry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of calendar_entry_event_type
        if self.calendar_entry_event_type:
            _dict['calendar_entry_event_type'] = self.calendar_entry_event_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attendees (list)
        _items = []
        if self.attendees:
            for _item_attendees in self.attendees:
                if _item_attendees:
                    _items.append(_item_attendees.to_dict())
            _dict['attendees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calendars (list)
        _items = []
        if self.calendars:
            for _item_calendars in self.calendars:
                if _item_calendars:
                    _items.append(_item_calendars.to_dict())
            _dict['calendars'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reminders (list)
        _items = []
        if self.reminders:
            for _item_reminders in self.reminders:
                if _item_reminders:
                    _items.append(_item_reminders.to_dict())
            _dict['reminders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in external_properties (list)
        _items = []
        if self.external_properties:
            for _item_external_properties in self.external_properties:
                if _item_external_properties:
                    _items.append(_item_external_properties.to_dict())
            _dict['external_properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "etag": obj.get("etag"),
            "summary": obj.get("summary"),
            "description": obj.get("description"),
            "location": obj.get("location"),
            "start_at": obj.get("start_at"),
            "end_at": obj.get("end_at"),
            "all_day": obj.get("all_day"),
            "recurrence_rule": obj.get("recurrence_rule"),
            "parent_calendar_entry_id": obj.get("parent_calendar_entry_id"),
            "court_rule": obj.get("court_rule"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "permission": obj.get("permission"),
            "calendar_owner_id": obj.get("calendar_owner_id"),
            "start_at_time_zone": obj.get("start_at_time_zone"),
            "time_entries_count": obj.get("time_entries_count"),
            "time_entries": [ActivityBase.from_dict(_item) for _item in obj["time_entries"]] if obj.get("time_entries") is not None else None,
            "conference_meeting": ConferenceMeetingBase.from_dict(obj["conference_meeting"]) if obj.get("conference_meeting") is not None else None,
            "matter": MatterBase.from_dict(obj["matter"]) if obj.get("matter") is not None else None,
            "matter_docket": MatterDocketBase.from_dict(obj["matter_docket"]) if obj.get("matter_docket") is not None else None,
            "calendar_owner": CalendarBase.from_dict(obj["calendar_owner"]) if obj.get("calendar_owner") is not None else None,
            "parent_calendar_entry": CalendarEntryBase.from_dict(obj["parent_calendar_entry"]) if obj.get("parent_calendar_entry") is not None else None,
            "calendar_entry_event_type": CalendarEntryEventTypeBase.from_dict(obj["calendar_entry_event_type"]) if obj.get("calendar_entry_event_type") is not None else None,
            "attendees": [AttendeeBase.from_dict(_item) for _item in obj["attendees"]] if obj.get("attendees") is not None else None,
            "calendars": [CalendarBase.from_dict(_item) for _item in obj["calendars"]] if obj.get("calendars") is not None else None,
            "reminders": [ReminderBase.from_dict(_item) for _item in obj["reminders"]] if obj.get("reminders") is not None else None,
            "external_properties": [ExternalPropertyBase.from_dict(_item) for _item in obj["external_properties"]] if obj.get("external_properties") is not None else None
        })
        return _obj


