# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from clio_sdk.models.account_balance_base import AccountBalanceBase
from clio_sdk.models.contact_base import ContactBase
from clio_sdk.models.contingency_fee_base import ContingencyFeeBase
from clio_sdk.models.custom_field_set_association_base import CustomFieldSetAssociationBase
from clio_sdk.models.custom_field_value import CustomFieldValue
from clio_sdk.models.evergreen_retainer_base import EvergreenRetainerBase
from clio_sdk.models.folder_base import FolderBase
from clio_sdk.models.group_base import GroupBase
from clio_sdk.models.legal_aid_uk_matter_base import LegalAidUkMatterBase
from clio_sdk.models.matter_bill_recipient import MatterBillRecipient
from clio_sdk.models.matter_budget_base import MatterBudgetBase
from clio_sdk.models.matter_custom_rate import MatterCustomRate
from clio_sdk.models.matter_stage_base import MatterStageBase
from clio_sdk.models.practice_area_base import PracticeAreaBase
from clio_sdk.models.relationship_base import RelationshipBase
from clio_sdk.models.task_base import TaskBase
from clio_sdk.models.task_template_list_instace_base import TaskTemplateListInstaceBase
from clio_sdk.models.user_base import UserBase
from typing import Optional, Set
from typing_extensions import Self

class Matter(BaseModel):
    """
    Matter
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique identifier for the *Matter*")
    etag: Optional[StrictStr] = Field(default=None, description="ETag for the *Matter*")
    number: Optional[StrictInt] = Field(default=None, description="The number given to the *Matter* within an account")
    display_number: Optional[StrictStr] = Field(default=None, description="The reference and label of the *Matter*. Depending on the account's manual_matter_numbering setting, this is either read only (generated) or customizable.")
    custom_number: Optional[StrictStr] = Field(default=None, description="User defined custom number of the *Matter*")
    currency: Optional[Dict[str, Any]] = Field(default=None, description="Currency of the matter")
    description: Optional[StrictStr] = Field(default=None, description="The detailed description of the *Matter*")
    status: Optional[StrictStr] = Field(default=None, description="The current status of the *Matter*")
    location: Optional[StrictStr] = Field(default=None, description="The location of the *Matter*")
    client_reference: Optional[StrictStr] = Field(default=None, description="Client Reference string for external uses")
    client_id: Optional[StrictInt] = Field(default=None, description="Client ID")
    billable: Optional[StrictBool] = Field(default=None, description="Whether this matter is billable")
    maildrop_address: Optional[StrictStr] = Field(default=None, description="A unique Maildrop email address for the matter")
    billing_method: Optional[StrictStr] = Field(default=None, description="Billing method of this matter")
    open_date: Optional[date] = Field(default=None, description="The date the matter was set to open (as a ISO-8601 date)")
    close_date: Optional[date] = Field(default=None, description="The date the matter was set to closed (as a ISO-8601 date)")
    pending_date: Optional[date] = Field(default=None, description="The date the matter was set to pending (as a ISO-8601 date)")
    created_at: Optional[datetime] = Field(default=None, description="The time the *Matter* was created (as a ISO-8601 timestamp)")
    updated_at: Optional[datetime] = Field(default=None, description="The time the *Matter* was last updated (as a ISO-8601 timestamp)")
    shared: Optional[StrictBool] = Field(default=None, description="Whether the matter is currently shared with Clio Connect")
    has_tasks: Optional[StrictBool] = Field(default=None, description="Whether or not the matter has any tasks.")
    last_activity_date: Optional[date] = Field(default=None, description="The greatest date out of all of the activities on the matter (as a ISO-8601 date)")
    matter_stage_updated_at: Optional[datetime] = Field(default=None, description="The date the matter stage was last updated (as a ISO-8601 date)")
    client: Optional[ContactBase] = None
    contingency_fee: Optional[ContingencyFeeBase] = None
    custom_rate: Optional[MatterCustomRate] = None
    evergreen_retainer: Optional[EvergreenRetainerBase] = None
    folder: Optional[FolderBase] = None
    group: Optional[GroupBase] = None
    matter_budget: Optional[MatterBudgetBase] = None
    matter_stage: Optional[MatterStageBase] = None
    originating_attorney: Optional[UserBase] = None
    practice_area: Optional[PracticeAreaBase] = None
    responsible_attorney: Optional[UserBase] = None
    statute_of_limitations: Optional[TaskBase] = None
    user: Optional[UserBase] = None
    legal_aid_uk_matter: Optional[LegalAidUkMatterBase] = None
    account_balances: Optional[List[AccountBalanceBase]] = Field(default=None, description="AccountBalance")
    custom_field_values: Optional[List[CustomFieldValue]] = Field(default=None, description="CustomFieldValue")
    custom_field_set_associations: Optional[List[CustomFieldSetAssociationBase]] = Field(default=None, description="CustomFieldSetAssociation")
    matter_bill_recipients: Optional[List[MatterBillRecipient]] = Field(default=None, description="MatterBillRecipient")
    relationships: Optional[List[RelationshipBase]] = Field(default=None, description="Relationship")
    task_template_list_instances: Optional[List[TaskTemplateListInstaceBase]] = Field(default=None, description="TaskTemplateListInstace")
    __properties: ClassVar[List[str]] = ["id", "etag", "number", "display_number", "custom_number", "currency", "description", "status", "location", "client_reference", "client_id", "billable", "maildrop_address", "billing_method", "open_date", "close_date", "pending_date", "created_at", "updated_at", "shared", "has_tasks", "last_activity_date", "matter_stage_updated_at", "client", "contingency_fee", "custom_rate", "evergreen_retainer", "folder", "group", "matter_budget", "matter_stage", "originating_attorney", "practice_area", "responsible_attorney", "statute_of_limitations", "user", "legal_aid_uk_matter", "account_balances", "custom_field_values", "custom_field_set_associations", "matter_bill_recipients", "relationships", "task_template_list_instances"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Pending', 'Open', 'Closed']):
            raise ValueError("must be one of enum values ('Pending', 'Open', 'Closed')")
        return value

    @field_validator('billing_method')
    def billing_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['flat', 'contingency', 'hourly']):
            raise ValueError("must be one of enum values ('flat', 'contingency', 'hourly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Matter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contingency_fee
        if self.contingency_fee:
            _dict['contingency_fee'] = self.contingency_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_rate
        if self.custom_rate:
            _dict['custom_rate'] = self.custom_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evergreen_retainer
        if self.evergreen_retainer:
            _dict['evergreen_retainer'] = self.evergreen_retainer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of folder
        if self.folder:
            _dict['folder'] = self.folder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matter_budget
        if self.matter_budget:
            _dict['matter_budget'] = self.matter_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of matter_stage
        if self.matter_stage:
            _dict['matter_stage'] = self.matter_stage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of originating_attorney
        if self.originating_attorney:
            _dict['originating_attorney'] = self.originating_attorney.to_dict()
        # override the default output from pydantic by calling `to_dict()` of practice_area
        if self.practice_area:
            _dict['practice_area'] = self.practice_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsible_attorney
        if self.responsible_attorney:
            _dict['responsible_attorney'] = self.responsible_attorney.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statute_of_limitations
        if self.statute_of_limitations:
            _dict['statute_of_limitations'] = self.statute_of_limitations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_aid_uk_matter
        if self.legal_aid_uk_matter:
            _dict['legal_aid_uk_matter'] = self.legal_aid_uk_matter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in account_balances (list)
        _items = []
        if self.account_balances:
            for _item_account_balances in self.account_balances:
                if _item_account_balances:
                    _items.append(_item_account_balances.to_dict())
            _dict['account_balances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_field_values (list)
        _items = []
        if self.custom_field_values:
            for _item_custom_field_values in self.custom_field_values:
                if _item_custom_field_values:
                    _items.append(_item_custom_field_values.to_dict())
            _dict['custom_field_values'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_field_set_associations (list)
        _items = []
        if self.custom_field_set_associations:
            for _item_custom_field_set_associations in self.custom_field_set_associations:
                if _item_custom_field_set_associations:
                    _items.append(_item_custom_field_set_associations.to_dict())
            _dict['custom_field_set_associations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in matter_bill_recipients (list)
        _items = []
        if self.matter_bill_recipients:
            for _item_matter_bill_recipients in self.matter_bill_recipients:
                if _item_matter_bill_recipients:
                    _items.append(_item_matter_bill_recipients.to_dict())
            _dict['matter_bill_recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in relationships (list)
        _items = []
        if self.relationships:
            for _item_relationships in self.relationships:
                if _item_relationships:
                    _items.append(_item_relationships.to_dict())
            _dict['relationships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in task_template_list_instances (list)
        _items = []
        if self.task_template_list_instances:
            for _item_task_template_list_instances in self.task_template_list_instances:
                if _item_task_template_list_instances:
                    _items.append(_item_task_template_list_instances.to_dict())
            _dict['task_template_list_instances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Matter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "etag": obj.get("etag"),
            "number": obj.get("number"),
            "display_number": obj.get("display_number"),
            "custom_number": obj.get("custom_number"),
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "location": obj.get("location"),
            "client_reference": obj.get("client_reference"),
            "client_id": obj.get("client_id"),
            "billable": obj.get("billable"),
            "maildrop_address": obj.get("maildrop_address"),
            "billing_method": obj.get("billing_method"),
            "open_date": obj.get("open_date"),
            "close_date": obj.get("close_date"),
            "pending_date": obj.get("pending_date"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "shared": obj.get("shared"),
            "has_tasks": obj.get("has_tasks"),
            "last_activity_date": obj.get("last_activity_date"),
            "matter_stage_updated_at": obj.get("matter_stage_updated_at"),
            "client": ContactBase.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "contingency_fee": ContingencyFeeBase.from_dict(obj["contingency_fee"]) if obj.get("contingency_fee") is not None else None,
            "custom_rate": MatterCustomRate.from_dict(obj["custom_rate"]) if obj.get("custom_rate") is not None else None,
            "evergreen_retainer": EvergreenRetainerBase.from_dict(obj["evergreen_retainer"]) if obj.get("evergreen_retainer") is not None else None,
            "folder": FolderBase.from_dict(obj["folder"]) if obj.get("folder") is not None else None,
            "group": GroupBase.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "matter_budget": MatterBudgetBase.from_dict(obj["matter_budget"]) if obj.get("matter_budget") is not None else None,
            "matter_stage": MatterStageBase.from_dict(obj["matter_stage"]) if obj.get("matter_stage") is not None else None,
            "originating_attorney": UserBase.from_dict(obj["originating_attorney"]) if obj.get("originating_attorney") is not None else None,
            "practice_area": PracticeAreaBase.from_dict(obj["practice_area"]) if obj.get("practice_area") is not None else None,
            "responsible_attorney": UserBase.from_dict(obj["responsible_attorney"]) if obj.get("responsible_attorney") is not None else None,
            "statute_of_limitations": TaskBase.from_dict(obj["statute_of_limitations"]) if obj.get("statute_of_limitations") is not None else None,
            "user": UserBase.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "legal_aid_uk_matter": LegalAidUkMatterBase.from_dict(obj["legal_aid_uk_matter"]) if obj.get("legal_aid_uk_matter") is not None else None,
            "account_balances": [AccountBalanceBase.from_dict(_item) for _item in obj["account_balances"]] if obj.get("account_balances") is not None else None,
            "custom_field_values": [CustomFieldValue.from_dict(_item) for _item in obj["custom_field_values"]] if obj.get("custom_field_values") is not None else None,
            "custom_field_set_associations": [CustomFieldSetAssociationBase.from_dict(_item) for _item in obj["custom_field_set_associations"]] if obj.get("custom_field_set_associations") is not None else None,
            "matter_bill_recipients": [MatterBillRecipient.from_dict(_item) for _item in obj["matter_bill_recipients"]] if obj.get("matter_bill_recipients") is not None else None,
            "relationships": [RelationshipBase.from_dict(_item) for _item in obj["relationships"]] if obj.get("relationships") is not None else None,
            "task_template_list_instances": [TaskTemplateListInstaceBase.from_dict(_item) for _item in obj["task_template_list_instances"]] if obj.get("task_template_list_instances") is not None else None
        })
        return _obj


