# coding: utf-8

"""
    Clio API Documentation

    # Developer Support and Feedback * Clio takes the availability and stability of our API seriously; please report any **degradations** or **breakages** to Clio's API Support team at [api@clio.com](mailto:api@clio.com). * For business and partnership inquiries, contact our API Partnerships team at [api.partnerships@clio.com](mailto:api.partnerships@clio.com). * For best practices and tips from the Clio development community, join the conversation in the [Clio Developer Slack Channel](https://join.slack.com/t/clio-public/shared_invite/zt-1bd5nfbiv-WloZR3ZjepoUTv28SI1ezw).  A community-driven [Clio Developers Stack Overflow Group](https://stackoverflow.com/questions/tagged/clio-api) also exists where you can connect and ask questions from other Clio API users. # Getting Started > **Note:** The API is available in four distinct data regions: Australia (au.app.clio.com), Canada (ca.app.clio.com), EU (eu.app.clio.com) and US (app.clio.com). > > Likewise, the developer portal is available at region-specific links for the [Australia](https://au.developers.clio.com), [Canada](https://ca.developers.clio.com), [EU](https://eu.developers.clio.com), and [US](https://developers.clio.com) regions. > > This document assumes the US region is being used (app.clio.com). If you're building in one of the other regions, you should adapt the links and examples as necessary.  To start building on the Clio API, you’ll need a Clio account – you can review our [Developer Handbook](https://docs.developers.clio.com/) and follow the steps to sign up for an account.  Once you have an account, you can [create a developer application](https://docs.developers.clio.com/api-docs/applications) from the [Developer Portal](https://developers.clio.com) and start building! # Authorization with OAuth 2.0 See our [Authorization documentation →](https://docs.developers.clio.com/api-docs/authorization) # Permissions See our [Permissions documentation →](https://docs.developers.clio.com/api-docs/permissions) # Fields See our [Fields documentation →](https://docs.developers.clio.com/api-docs/fields) # Rate Limiting See our [Rate Limits documentation →](https://docs.developers.clio.com/api-docs/rate-limits) # Paging See our [Pagination documentation →](https://docs.developers.clio.com/api-docs/paging) # ETags See our [ETags documentation →](https://docs.developers.clio.com/api-docs/etags) # Minor Versions API v4 supports multiple minor versions. Versions are of the form '4.X.Y'. To request a specific version, you can use an `X-API-VERSION` header in your request, with the header value set to the API version you're requesting. If this header is omitted, it will be treated as a request for the default API version. If the header is present but invalid, it will return a `410 Gone` response. If the header is present and valid, but it is no longer supported, it will return a `410 Gone` response.  An `X-API-VERSION` will be included in all successful responses, with the value being set to the API version used.  You can find our [API Versioning Policy and Guidelines](https://docs.developers.clio.com/api-docs/api-versioning-policy) in our documentation hub.  The [API Changelog](https://docs.developers.clio.com/api-docs/api-changelog) explains each version's changes in further detail. - 4.0.4    Update `quantity` field to return values in seconds rather than hours for Activities  - 4.0.5    * Remove `matter_balances` field from Bills   * Standardize status/state enum values   * Add a Document association to completed DocumentAutomations   * Add rate visibility handling for Activity's price and total  - 4.0.6    Remove `document_versions` collection field from Documents  - 4.0.7    Change secure link format  - 4.0.8    * `Activity` hours are redacted in the response based on the activity hours visibility setting for the user   * Add `quantity_redacted` field to activities  - 4.0.9    **This is the default version**    Contacts are filtered and redacted in the response based on the new 'Contacts Visibility' user permission setting.  - 4.0.10    Fixed validation of `type` query parameter when querying Notes   

    The version of the OpenAPI document: v4
    Contact: api@clio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from clio_sdk.models.lauk_civil_certificated_rate_list import LaukCivilCertificatedRateList

from clio_sdk.api_client import ApiClient, RequestSerialized
from clio_sdk.api_response import ApiResponse
from clio_sdk.rest import RESTResponseType


class CivilCertificatedRatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def lauk_civil_certificated_rate_index(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        activity: Annotated[Optional[StrictStr], Field(description="Filter by activity.")] = None,
        activity_sub_category: Annotated[Optional[StrictStr], Field(description="Filter by activity sub-category.")] = None,
        attended_several_hearings_for_multiple_clients: Annotated[Optional[StrictBool], Field(description="Filter by whether multiple hearings were attended for multiple clients.")] = None,
        category_of_law: Annotated[Optional[StrictStr], Field(description="Filter by category of law.")] = None,
        change_of_solicitor: Annotated[Optional[StrictBool], Field(description="Filter by change of solicitor status.")] = None,
        court: Annotated[Optional[StrictStr], Field(description="Filter by court.")] = None,
        eligible_for_sqm: Annotated[Optional[StrictBool], Field(description="Filter by SQM eligibility.")] = None,
        fee_scheme: Annotated[Optional[StrictStr], Field(description="Fee scheme")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        first_conducting_solicitor: Annotated[Optional[StrictBool], Field(description="Filter by first conducting solicitor status.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Filter by key.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        number_of_clients: Annotated[Optional[StrictStr], Field(description="Filter by number of clients.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        party: Annotated[Optional[StrictStr], Field(description="Filter by party.")] = None,
        post_transfer_clients_represented: Annotated[Optional[StrictStr], Field(description="Filter by post-transfer clients represented.")] = None,
        rate_type: Annotated[Optional[StrictStr], Field(description="Filter by rate type.")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by region.")] = None,
        session_type: Annotated[Optional[StrictStr], Field(description="Filter by session type.")] = None,
        user_type: Annotated[Optional[StrictStr], Field(description="Filter by user type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaukCivilCertificatedRateList:
        """List Civil Certificated Rates

        Outlines the parameters, optional and required, used when requesting the data for all LaukCivilCertificatedRates

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param activity: Filter by activity.
        :type activity: str
        :param activity_sub_category: Filter by activity sub-category.
        :type activity_sub_category: str
        :param attended_several_hearings_for_multiple_clients: Filter by whether multiple hearings were attended for multiple clients.
        :type attended_several_hearings_for_multiple_clients: bool
        :param category_of_law: Filter by category of law.
        :type category_of_law: str
        :param change_of_solicitor: Filter by change of solicitor status.
        :type change_of_solicitor: bool
        :param court: Filter by court.
        :type court: str
        :param eligible_for_sqm: Filter by SQM eligibility.
        :type eligible_for_sqm: bool
        :param fee_scheme: Fee scheme
        :type fee_scheme: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param first_conducting_solicitor: Filter by first conducting solicitor status.
        :type first_conducting_solicitor: bool
        :param key: Filter by key.
        :type key: str
        :param limit: A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param number_of_clients: Filter by number of clients.
        :type number_of_clients: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param party: Filter by party.
        :type party: str
        :param post_transfer_clients_represented: Filter by post-transfer clients represented.
        :type post_transfer_clients_represented: str
        :param rate_type: Filter by rate type.
        :type rate_type: str
        :param region: Filter by region.
        :type region: str
        :param session_type: Filter by session type.
        :type session_type: str
        :param user_type: Filter by user type.
        :type user_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lauk_civil_certificated_rate_index_serialize(
            x_api_version=x_api_version,
            activity=activity,
            activity_sub_category=activity_sub_category,
            attended_several_hearings_for_multiple_clients=attended_several_hearings_for_multiple_clients,
            category_of_law=category_of_law,
            change_of_solicitor=change_of_solicitor,
            court=court,
            eligible_for_sqm=eligible_for_sqm,
            fee_scheme=fee_scheme,
            fields=fields,
            first_conducting_solicitor=first_conducting_solicitor,
            key=key,
            limit=limit,
            number_of_clients=number_of_clients,
            page_token=page_token,
            party=party,
            post_transfer_clients_represented=post_transfer_clients_represented,
            rate_type=rate_type,
            region=region,
            session_type=session_type,
            user_type=user_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaukCivilCertificatedRateList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def lauk_civil_certificated_rate_index_with_http_info(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        activity: Annotated[Optional[StrictStr], Field(description="Filter by activity.")] = None,
        activity_sub_category: Annotated[Optional[StrictStr], Field(description="Filter by activity sub-category.")] = None,
        attended_several_hearings_for_multiple_clients: Annotated[Optional[StrictBool], Field(description="Filter by whether multiple hearings were attended for multiple clients.")] = None,
        category_of_law: Annotated[Optional[StrictStr], Field(description="Filter by category of law.")] = None,
        change_of_solicitor: Annotated[Optional[StrictBool], Field(description="Filter by change of solicitor status.")] = None,
        court: Annotated[Optional[StrictStr], Field(description="Filter by court.")] = None,
        eligible_for_sqm: Annotated[Optional[StrictBool], Field(description="Filter by SQM eligibility.")] = None,
        fee_scheme: Annotated[Optional[StrictStr], Field(description="Fee scheme")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        first_conducting_solicitor: Annotated[Optional[StrictBool], Field(description="Filter by first conducting solicitor status.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Filter by key.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        number_of_clients: Annotated[Optional[StrictStr], Field(description="Filter by number of clients.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        party: Annotated[Optional[StrictStr], Field(description="Filter by party.")] = None,
        post_transfer_clients_represented: Annotated[Optional[StrictStr], Field(description="Filter by post-transfer clients represented.")] = None,
        rate_type: Annotated[Optional[StrictStr], Field(description="Filter by rate type.")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by region.")] = None,
        session_type: Annotated[Optional[StrictStr], Field(description="Filter by session type.")] = None,
        user_type: Annotated[Optional[StrictStr], Field(description="Filter by user type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaukCivilCertificatedRateList]:
        """List Civil Certificated Rates

        Outlines the parameters, optional and required, used when requesting the data for all LaukCivilCertificatedRates

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param activity: Filter by activity.
        :type activity: str
        :param activity_sub_category: Filter by activity sub-category.
        :type activity_sub_category: str
        :param attended_several_hearings_for_multiple_clients: Filter by whether multiple hearings were attended for multiple clients.
        :type attended_several_hearings_for_multiple_clients: bool
        :param category_of_law: Filter by category of law.
        :type category_of_law: str
        :param change_of_solicitor: Filter by change of solicitor status.
        :type change_of_solicitor: bool
        :param court: Filter by court.
        :type court: str
        :param eligible_for_sqm: Filter by SQM eligibility.
        :type eligible_for_sqm: bool
        :param fee_scheme: Fee scheme
        :type fee_scheme: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param first_conducting_solicitor: Filter by first conducting solicitor status.
        :type first_conducting_solicitor: bool
        :param key: Filter by key.
        :type key: str
        :param limit: A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param number_of_clients: Filter by number of clients.
        :type number_of_clients: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param party: Filter by party.
        :type party: str
        :param post_transfer_clients_represented: Filter by post-transfer clients represented.
        :type post_transfer_clients_represented: str
        :param rate_type: Filter by rate type.
        :type rate_type: str
        :param region: Filter by region.
        :type region: str
        :param session_type: Filter by session type.
        :type session_type: str
        :param user_type: Filter by user type.
        :type user_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lauk_civil_certificated_rate_index_serialize(
            x_api_version=x_api_version,
            activity=activity,
            activity_sub_category=activity_sub_category,
            attended_several_hearings_for_multiple_clients=attended_several_hearings_for_multiple_clients,
            category_of_law=category_of_law,
            change_of_solicitor=change_of_solicitor,
            court=court,
            eligible_for_sqm=eligible_for_sqm,
            fee_scheme=fee_scheme,
            fields=fields,
            first_conducting_solicitor=first_conducting_solicitor,
            key=key,
            limit=limit,
            number_of_clients=number_of_clients,
            page_token=page_token,
            party=party,
            post_transfer_clients_represented=post_transfer_clients_represented,
            rate_type=rate_type,
            region=region,
            session_type=session_type,
            user_type=user_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaukCivilCertificatedRateList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def lauk_civil_certificated_rate_index_without_preload_content(
        self,
        x_api_version: Annotated[Optional[StrictStr], Field(description="The [API minor version](#section/Minor-Versions). Default: latest version.")] = None,
        activity: Annotated[Optional[StrictStr], Field(description="Filter by activity.")] = None,
        activity_sub_category: Annotated[Optional[StrictStr], Field(description="Filter by activity sub-category.")] = None,
        attended_several_hearings_for_multiple_clients: Annotated[Optional[StrictBool], Field(description="Filter by whether multiple hearings were attended for multiple clients.")] = None,
        category_of_law: Annotated[Optional[StrictStr], Field(description="Filter by category of law.")] = None,
        change_of_solicitor: Annotated[Optional[StrictBool], Field(description="Filter by change of solicitor status.")] = None,
        court: Annotated[Optional[StrictStr], Field(description="Filter by court.")] = None,
        eligible_for_sqm: Annotated[Optional[StrictBool], Field(description="Filter by SQM eligibility.")] = None,
        fee_scheme: Annotated[Optional[StrictStr], Field(description="Fee scheme")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).")] = None,
        first_conducting_solicitor: Annotated[Optional[StrictBool], Field(description="Filter by first conducting solicitor status.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="Filter by key.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.")] = None,
        number_of_clients: Annotated[Optional[StrictStr], Field(description="Filter by number of clients.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A token specifying which page to return.")] = None,
        party: Annotated[Optional[StrictStr], Field(description="Filter by party.")] = None,
        post_transfer_clients_represented: Annotated[Optional[StrictStr], Field(description="Filter by post-transfer clients represented.")] = None,
        rate_type: Annotated[Optional[StrictStr], Field(description="Filter by rate type.")] = None,
        region: Annotated[Optional[StrictStr], Field(description="Filter by region.")] = None,
        session_type: Annotated[Optional[StrictStr], Field(description="Filter by session type.")] = None,
        user_type: Annotated[Optional[StrictStr], Field(description="Filter by user type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Civil Certificated Rates

        Outlines the parameters, optional and required, used when requesting the data for all LaukCivilCertificatedRates

        :param x_api_version: The [API minor version](#section/Minor-Versions). Default: latest version.
        :type x_api_version: str
        :param activity: Filter by activity.
        :type activity: str
        :param activity_sub_category: Filter by activity sub-category.
        :type activity_sub_category: str
        :param attended_several_hearings_for_multiple_clients: Filter by whether multiple hearings were attended for multiple clients.
        :type attended_several_hearings_for_multiple_clients: bool
        :param category_of_law: Filter by category of law.
        :type category_of_law: str
        :param change_of_solicitor: Filter by change of solicitor status.
        :type change_of_solicitor: bool
        :param court: Filter by court.
        :type court: str
        :param eligible_for_sqm: Filter by SQM eligibility.
        :type eligible_for_sqm: bool
        :param fee_scheme: Fee scheme
        :type fee_scheme: str
        :param fields: The fields to be returned. See response samples for what fields are available. For more information see the [fields section](#section/Fields).
        :type fields: str
        :param first_conducting_solicitor: Filter by first conducting solicitor status.
        :type first_conducting_solicitor: bool
        :param key: Filter by key.
        :type key: str
        :param limit: A limit on the number of LaukCivilCertificatedRate records to be returned. Limit can range between 1 and 200. Default: `200`.
        :type limit: int
        :param number_of_clients: Filter by number of clients.
        :type number_of_clients: str
        :param page_token: A token specifying which page to return.
        :type page_token: str
        :param party: Filter by party.
        :type party: str
        :param post_transfer_clients_represented: Filter by post-transfer clients represented.
        :type post_transfer_clients_represented: str
        :param rate_type: Filter by rate type.
        :type rate_type: str
        :param region: Filter by region.
        :type region: str
        :param session_type: Filter by session type.
        :type session_type: str
        :param user_type: Filter by user type.
        :type user_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lauk_civil_certificated_rate_index_serialize(
            x_api_version=x_api_version,
            activity=activity,
            activity_sub_category=activity_sub_category,
            attended_several_hearings_for_multiple_clients=attended_several_hearings_for_multiple_clients,
            category_of_law=category_of_law,
            change_of_solicitor=change_of_solicitor,
            court=court,
            eligible_for_sqm=eligible_for_sqm,
            fee_scheme=fee_scheme,
            fields=fields,
            first_conducting_solicitor=first_conducting_solicitor,
            key=key,
            limit=limit,
            number_of_clients=number_of_clients,
            page_token=page_token,
            party=party,
            post_transfer_clients_represented=post_transfer_clients_represented,
            rate_type=rate_type,
            region=region,
            session_type=session_type,
            user_type=user_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaukCivilCertificatedRateList",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '429': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _lauk_civil_certificated_rate_index_serialize(
        self,
        x_api_version,
        activity,
        activity_sub_category,
        attended_several_hearings_for_multiple_clients,
        category_of_law,
        change_of_solicitor,
        court,
        eligible_for_sqm,
        fee_scheme,
        fields,
        first_conducting_solicitor,
        key,
        limit,
        number_of_clients,
        page_token,
        party,
        post_transfer_clients_represented,
        rate_type,
        region,
        session_type,
        user_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if activity is not None:
            
            _query_params.append(('activity', activity))
            
        if activity_sub_category is not None:
            
            _query_params.append(('activity_sub_category', activity_sub_category))
            
        if attended_several_hearings_for_multiple_clients is not None:
            
            _query_params.append(('attended_several_hearings_for_multiple_clients', attended_several_hearings_for_multiple_clients))
            
        if category_of_law is not None:
            
            _query_params.append(('category_of_law', category_of_law))
            
        if change_of_solicitor is not None:
            
            _query_params.append(('change_of_solicitor', change_of_solicitor))
            
        if court is not None:
            
            _query_params.append(('court', court))
            
        if eligible_for_sqm is not None:
            
            _query_params.append(('eligible_for_sqm', eligible_for_sqm))
            
        if fee_scheme is not None:
            
            _query_params.append(('fee_scheme', fee_scheme))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if first_conducting_solicitor is not None:
            
            _query_params.append(('first_conducting_solicitor', first_conducting_solicitor))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if number_of_clients is not None:
            
            _query_params.append(('number_of_clients', number_of_clients))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if party is not None:
            
            _query_params.append(('party', party))
            
        if post_transfer_clients_represented is not None:
            
            _query_params.append(('post_transfer_clients_represented', post_transfer_clients_represented))
            
        if rate_type is not None:
            
            _query_params.append(('rate_type', rate_type))
            
        if region is not None:
            
            _query_params.append(('region', region))
            
        if session_type is not None:
            
            _query_params.append(('session_type', session_type))
            
        if user_type is not None:
            
            _query_params.append(('user_type', user_type))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['X-API-VERSION'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/lauk_civil_certificated_rates.json',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


